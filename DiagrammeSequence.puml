@startuml

skinparam sequenceParticipant underline

actor Utilisateur
participant "fp : fenetreprincipale" as FP
participant "i : Interpreteur" as I
participant "cl : ConsructeurLitterale" as CL
participant "e1 : Entier" as E1
participant "i1 : Item" as I1
participant "e2 : Entier" as E2
participant "i2 : Item" as I2
participant "e3 : Entier" as E3
participant "i3 : Item" as I3
participant "p : Pile" as P
participant "o : Operateur" as O


Utilisateur -> FP : getNextCommande()
activate FP

FP -> I: interpreter("3 6 *")
activate I

I -> I: execute("3")

I -> CL : distinguerConstruire("3")
activate CL

CL -> E1 : Entier("3")
activate E1

CL -> I1 : Item(e1, "Entier")
activate I1

CL -> I : i1

I -> P : push(i1)
activate P

deactivate P
deactivate CL

I -> I: execute("6")

I -> CL : distinguerConstruire("6")
activate CL

CL -> E2 : Entier("6")
activate E2

CL -> I2 : Item(e2, "Entier")
activate I2

CL -> I : i2

I -> P : push(i2)
activate P

deactivate P
deactivate CL

I -> I: executer("*")



I -> O : inventaireOpArite2.contains("*")
activate O

O -> I : True
deactivate O

I -> P : end()
activate P

P -> I : i2

I -> P : end(1)

P -> I : i1
deactivate P

I -> O : inventaireOpArite2[*](i1, i2)
activate O

O -> O : OpMul(i1, i2)

O -> CL : distinguerConstruire("18")

activate CL

CL -> E3 : Entier("18")
activate E3

CL -> I3 : Item(e3, "Entier")
activate I3

CL -> O : i3
deactivate CL

O -> I : i3
deactivate O

I -> P : pop()
activate P
deactivate P

I -> I1 : i1.supprimer()
deactivate E1
destroy E1
deactivate I1
destroy I1

I -> P : pop()
activate P
deactivate P

I -> I2 : i2.supprimer()
deactivate E2
destroy E2
deactivate I2
destroy I2

I -> P : push(i3)
activate P
deactivate P

deactivate I
deactivate E3
deactivate I3
deactivate FP

@enduml