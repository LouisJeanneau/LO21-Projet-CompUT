@startuml

package "GroupeLitterale" {


    Class ConstructeurLitterale{
    
        -string : char[30] 
        +ConstructeurLitterale() 
        +Constructeur_entier() 
        +Constructeur_reel() 
        +Constructeur_atome() 
        +Constructeur_expression(Atome & a) 
    }

    Class Litterale {
    
         -str: char[30] 
         -reel: double 
         -nom: Atome* 
         +virtual bouton() 
         +distinct() 
         +virtual empiler() 
         +virtual memoriser() 
         +virtual ~Litterale() 

    }


    Class Atome{
    
        -fonction: int  //indiquer le role joue
        +if_identifi(): int 
    }

    Class Expression{
    
        -guillemet1: char 
        -guillemet2: char 
        -r: Reel*  
        -e: Entier* 
        -ra: Rationnel*  
        -p: Program*  
        -a: Atome*  
        +if_predefini(): int 
        +if_deja_utilise(): int 
    }

    Class Numerique{
    
    }

    Class Reel{
        -val: double 
        -point: char 
        +simplifier() 
    }

    Class Rationel{
        -if_simple: int 
        -slash: char 
        +simplifier() 
        }
    
    Class Entier{
        -signe: char 

    }

    Class Programme{
        -crochet1: char 
        -crochet2: char 
    }

}



Class Item{
    -litPointeur : Litterale*
    +Item(l : Litteral*)
    +supprimer()
    +obtenirLitterale() : Litterale&
}

package "GroupeOperateur" {

Class Operateur{
    +{static} inventaireOpArite2: QMap<QString, std::function<Litterale&(Item, Item)>>
    +{static} inventaireOpArite1: QMap<QString, std::function<Litterale&(Item)>>
    +{static} inventaireOpArite0: QMap<QString, std::function<Litterale&()>>
    +{static}opEVAL(Item & i): void
}

Class OperateurNumerique {
    +{static}opPLUS(Item& i1, Item& i2) : Litterale&
    +{static}opMOINS(Item& i1, Item& i2) : Litterale&
    +{static}opMUL(Item& i1, Item& i2) : Litterale&
    +{static}opDIVISION(Item& i1, Item& i2) : Litterale&
    +{static}opDIV(Item& i1, Item& i2) : Litterale&
    +{static}opMOD(Item& i1, Item& i2) : Litterale&
    +{static}opNEG(Item& i) : Litterale&
}

Class OperateurLogique {
    +{static}opEGAL(Item& i1, Item& i2) : Litterale&
    +{static}opDIFFERENT(Item& i1, Item& i2) : Litterale&
    +{static}opINFEGAL(Item& i1, Item& i2) : Litterale&
    +{static}opSUPEGAL(Item& i1, Item& i2) : Litterale&
    +{static}opSUP(Item& i1, Item& i2) : Litterale&
    +{static}opINF(Item& i1, Item& i2) : Litterale&
    +{static}opAND(Item& i1, Item& i2) : Litterale&
    +{static}opOR(Item& i1, Item& i2) : Litterale&
    +{static}opNOT(Item& i) : Litterale&


}

Class OperateurPile {
    +{static}opDUP(Item &) : Litterale&
    +{static}opDROP(Item &) : void
    +{static}opSWAP(Item &i1, Item &i2) : void
    +{static}opCLEAR() : void
}

Class OperateurConditionnel {
    +{static}opIFT(Item &i1, Item &i2) : void
}



}


Class Pile{
    -listeItems : vector<Item>
    -{static} instance : Pile
    +pop() : Item
    +push(item : Item) : void
    +estVide() : bool
    +taille() : unsigned int



}

Class Interpreteur{
    -pile : Pile&
    -{static} instance: Interpreteur
    +interprete(commandeEntree : QString)
    +execute(operande : QString)
    +{static} obtenirInterpreteur : Interpreteur&
}

Class Controleur{
    -refIntp : Interpreteur&
    -refPile : Pile&
    -message : QString
    +Controleur(intp : Interpreteur&, p : Pile&)
    +commande(c : const QString&)
    +setMessage(m : const QString&)
    +getMessage() : QString const
}

Class Persistance{

}

package "groupeAffichage" {

    Class Affichage{

    }

    Class Qt {
	-barreMessage : QLineEdit *
	-barreEntree : QLineEdit *
	-vuePile : QTableWidget *
	-coucheDisposition : QVBoxLayout*
	-pile : Pile *
	-controleur : Controleur *
	+Qcomputer(QWidget * parent = 0)
	+~QComputer()
	+refresh()
	+getNextCommande()
    }

}

Litterale <|-- Programme
Litterale <|-- Numerique
Litterale <|-- Expression
Litterale <|-- Atome
Numerique <|-- Reel
Numerique <|-- Rationel
Numerique <|-- Entier

Operateur <|-- OperateurNumerique
Operateur <|-- OperateurLogique
Operateur <|-- OperateurPile
Operateur <|-- OperateurConditionnel 

ConstructeurLitterale *-- Litterale
Interpreteur *-- Operateur
Interpreteur *-- ConstructeurLitterale
Item *-- Litterale
Pile o-- Item
Pile <--> Interpreteur
Controleur *--> Interpreteur
Controleur *--> Pile
Controleur <-- Persistance
Controleur *--> Affichage
Affichage --> Qt

@enduml
