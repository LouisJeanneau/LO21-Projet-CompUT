@startuml

package "GroupeLitterale" {
    Class Litterale{

    }

    Class ConstructeurLitterale{

    }

    Class Atome{

    }

    Class Expression{

    }

    Class Numerique{

    }

    Class Reel{

    }

    Class Rationel{

    }

    Class Entier{

    }

    Class Programme{

    }

}


Class Item{
    -lit : Litterale
    +obtenirLitterale() : Litterale&
}

package "GroupeOperateur" {

Class Operateur{
    -listeOperateur : QMap<Qstring>
    +opEVAL(Litterale & l): void
}

Class OperateurNumerique {
    +opPLUS(Litterale & l1, Litterale & l2) : Litterale&
    +opMOINS(Litterale & l1, Litterale & l2) : Litterale&
    +opMUL(Litterale & l1, Litterale & l2) : Litterale&
    +opDIVISION(Litterale & l1, Litterale & l2) : Litterale&
    +opDIV(Litterale & l1, Litterale & l2) : Litterale&
    +opMOD(Litterale & l1, Litterale & l2) : Litterale&
    +opNEG(Litterale & l) : Litterale&
}

Class OperateurLogique {
    +opEGAL(Litterale & l1, Litterale & l2) : Litterale&
    +opDIFFERENT(Litterale & l1, Litterale & l2) : Litterale&
    +opINFEGAL(Litterale & l1, Litterale & l2) : Litterale&
    +opSUPEGAL(Litterale & l1, Litterale & l2) : Litterale&
    +opSUP(Litterale & l1, Litterale & l2) : Litterale&
    +opINF(Litterale & l1, Litterale & l2) : Litterale&
    +opAND(Litterale & l1, Litterale & l2) : Litterale&
    +opOR(Litterale & l1, Litterale & l2) : Litterale&
    +opNOT(Litterale & l) : Litterale&


}

Class OperateurPile {
    +opDUP() : void
    +opDROP() : void
    +opSWAP() : void 
    +opCLEAR() : void
}

Class OperateurConditionnel {
    +opIFT() : void
}



}


Class Pile{
    -listeItems : Item*[]
    -CapaciteMax : size_t
    -NombreElements : size_t
    -AgrandissementCapacite() : void
    +pop() : Item&
    +push(item : Item) : void
    +estVide() : bool
    +taille() : size_t



}

Class Interpreter{
    -ChaineCommande : QString
    -OperandeActuel : QString
    -PointeurPile : Pile*
    +interprete(CommandeEntree : const QString&)
}

Class Controleur{
    -RefIntp : Interpreter&
    -RefPile : Pile&
    +Controleur(intp : Interpreter&, p : Pile&)
    +commande(c : const QString&)
    +setMessage(m : const QString&)
    +getMessage() : QString const
}

Class Persistance{

}

package "groupeAffichage" {

    Class Affichage{

    }

    Class Qt {
	-barreMessage : QLineEdit *
	-barreEntree : QLineEdit *
	-vuePile : QTableWidget *
	-coucheDisposition : QVBoxLayout*
	-pile : Pile *
	-controleur : Controleur *
	+Qcomputer(QWidget * parent = 0)
	+~QComputer()
	+refresh()
	+getNextCommande()
    }

}

Litterale <|-- Programme
Litterale <|-- Numerique
Litterale <|-- Expression
Litterale <|-- Atome
Numerique <|-- Reel
Numerique <|-- Rationel
Numerique <|-- Entier

Operateur <|-- OperateurNumerique
Operateur <|-- OperateurLogique
Operateur <|-- OperateurPile
Operateur <|-- OperateurConditionnel 

ConstructeurLitterale *-- Litterale
Interpreter *-- Operateur
Interpreter *-- ConstructeurLitterale
Item *-- Litterale
Pile o-- Item
Pile <--> Interpreter
Controleur *--> Interpreter
Controleur *--> Pile
Controleur <-- Persistance
Controleur *--> Affichage
Affichage --> Qt

@enduml
