@startuml

package "GroupeLitterale" {

    Class Litterale{
    
         -char[30]   str;
         -double reel;
         -Atome*  nom=nullptr;
         +virtual bouton();
         +distinct();
         +virtual empiler();
         +virtual memoriser();
         +virtual ~Litterale();

    }

    Class ConstructeurLitterale：public Litterale{
    
        -char[30] string;
        +ConstructeurLitterale();
        +Constructeur_entier;
        +Constructeur_reel;
        +Constructeur_atome;
        +Constructeur_expression(Atome & a);
    }

    Class Atome：public Litterale{
    
        -int fonction; //indiquer le role joue
        +int if_identifi();
    }

    Class Expression：public Litterale{
    
        -char guillmet1,guillmet2;
        -Reel* r;
        -Entier* e;
        -Rationnel* ra;
        -Program* p;
        -Atome* a;
        +int if_predefini();
        +int if_deja_utilise();
    }

    Class Numerique：public Litterale{
    
    }

    Class Reel：public Numerique{
        -double val;
        -char point;
        +simplifier();
    }

    Class Rationel：public Numerique{
        -int if_simple;
        -char slash;
        +simplifier();
        }
    
    Class Entier：public Numerique{
        -char signe;

    }

    Class Programme：public Litterale{
        -char crochet1,crochet2;

    }

}



Class Item{
    -lit : Litterale
    +obtenirLitterale() : Litterale&
}

package "GroupeOperateur" {

Class Operateur{
    -listeOperateur : QMap<Qstring>
    +opEVAL(Litterale & l): void
}

Class OperateurNumerique {
    +opPLUS(Litterale & l1, Litterale & l2) : Litterale&
    +opMOINS(Litterale & l1, Litterale & l2) : Litterale&
    +opMUL(Litterale & l1, Litterale & l2) : Litterale&
    +opDIVISION(Litterale & l1, Litterale & l2) : Litterale&
    +opDIV(Litterale & l1, Litterale & l2) : Litterale&
    +opMOD(Litterale & l1, Litterale & l2) : Litterale&
    +opNEG(Litterale & l) : Litterale&
}

Class OperateurLogique {
    +opEGAL(Litterale & l1, Litterale & l2) : Litterale&
    +opDIFFERENT(Litterale & l1, Litterale & l2) : Litterale&
    +opINFEGAL(Litterale & l1, Litterale & l2) : Litterale&
    +opSUPEGAL(Litterale & l1, Litterale & l2) : Litterale&
    +opSUP(Litterale & l1, Litterale & l2) : Litterale&
    +opINF(Litterale & l1, Litterale & l2) : Litterale&
    +opAND(Litterale & l1, Litterale & l2) : Litterale&
    +opOR(Litterale & l1, Litterale & l2) : Litterale&
    +opNOT(Litterale & l) : Litterale&


}

Class OperateurPile {
    +opDUP() : void
    +opDROP() : void
    +opSWAP() : void 
    +opCLEAR() : void
}

Class OperateurConditionnel {
    +opIFT() : void
}



}


Class Pile{
    -listeItems : vector<Item>
    +pop() : Item&
    +push(item : Item) : void
    +estVide() : bool
    +taille() : size_t



}

Class Interpreteur{
    -chaineCommande : QString
    -operandeActuel : QString
    -pointeurPile : Pile*
    +interprete(CommandeEntree : const QString&)
}

Class Controleur{
    -refIntp : Interpreteur&
    -refPile : Pile&
    -message : QString
    +Controleur(intp : Interpreteur&, p : Pile&)
    +commande(c : const QString&)
    +setMessage(m : const QString&)
    +getMessage() : QString const
}

Class Persistance{

}

package "groupeAffichage" {

    Class Affichage{

    }

    Class Qt {
	-barreMessage : QLineEdit *
	-barreEntree : QLineEdit *
	-vuePile : QTableWidget *
	-coucheDisposition : QVBoxLayout*
	-pile : Pile *
	-controleur : Controleur *
	+Qcomputer(QWidget * parent = 0)
	+~QComputer()
	+refresh()
	+getNextCommande()
    }

}

Litterale <|-- Programme
Litterale <|-- Numerique
Litterale <|-- Expression
Litterale <|-- Atome
Numerique <|-- Reel
Numerique <|-- Rationel
Numerique <|-- Entier

Operateur <|-- OperateurNumerique
Operateur <|-- OperateurLogique
Operateur <|-- OperateurPile
Operateur <|-- OperateurConditionnel 

ConstructeurLitterale *-- Litterale
Interpreteur *-- Operateur
Interpreteur *-- ConstructeurLitterale
Item *-- Litterale
Pile o-- Item
Pile <--> Interpreteur
Controleur *--> Interpreteur
Controleur *--> Pile
Controleur <-- Persistance
Controleur *--> Affichage
Affichage --> Qt

@enduml
