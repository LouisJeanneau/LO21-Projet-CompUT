@startuml

package "GroupeLitterale" {


    Class ConstructeurLitterale{
    
        -string : char[30] 
        +ConstructeurLitterale() 
        +Constructeur_entier() 
        +Constructeur_reel() 
        +Constructeur_atome() 
        +Constructeur_expression(Atome & a) 
    }

    Class Litterale {
    
         -str: char[30] 
         -reel: double 
         -nom: Atome* 
         +virtual bouton() 
         +distinct() 
         +virtual empiler() 
         +virtual memoriser() 
         +virtual ~Litterale() 

    }


    Class Atome{
    
        -fonction: int  //indiquer le role joue
        +if_identifi(): int 
    }

    Class Expression{
    
        -guillemet1: char 
        -guillemet2: char 
        -r: Reel*  
        -e: Entier* 
        -ra: Rationnel*  
        -p: Program*  
        -a: Atome*  
        +if_predefini(): int 
        +if_deja_utilise(): int 
    }

    Class Numerique{
    
    }

    Class Reel{
        -val: double 
        -point: char 
        +simplifier() 
    }

    Class Rationel{
        -if_simple: int 
        -slash: char 
        +simplifier() 
        }
    
    Class Entier{
        -signe: char 

    }

    Class Programme{
        -crochet1: char 
        -crochet2: char 
    }

}



Class Item{
    -litPointeur : Litterale*
    +Item(l : Litteral*)
    +supprimer()
    +obtenirLitterale() : Litterale&
}

package "GroupeOperateur" {

Class Operateur{
    -listeOperateur : QMap<Qstring>
    +opEVAL(Litterale & l): void
}

Class OperateurNumerique {
    +opPLUS(Litterale & l1, Litterale & l2) : Litterale&
    +opMOINS(Litterale & l1, Litterale & l2) : Litterale&
    +opMUL(Litterale & l1, Litterale & l2) : Litterale&
    +opDIVISION(Litterale & l1, Litterale & l2) : Litterale&
    +opDIV(Litterale & l1, Litterale & l2) : Litterale&
    +opMOD(Litterale & l1, Litterale & l2) : Litterale&
    +opNEG(Litterale & l) : Litterale&
}

Class OperateurLogique {
    +opEGAL(Litterale & l1, Litterale & l2) : Litterale&
    +opDIFFERENT(Litterale & l1, Litterale & l2) : Litterale&
    +opINFEGAL(Litterale & l1, Litterale & l2) : Litterale&
    +opSUPEGAL(Litterale & l1, Litterale & l2) : Litterale&
    +opSUP(Litterale & l1, Litterale & l2) : Litterale&
    +opINF(Litterale & l1, Litterale & l2) : Litterale&
    +opAND(Litterale & l1, Litterale & l2) : Litterale&
    +opOR(Litterale & l1, Litterale & l2) : Litterale&
    +opNOT(Litterale & l) : Litterale&


}

Class OperateurPile {
    +opDUP() : void
    +opDROP() : void
    +opSWAP() : void 
    +opCLEAR() : void
}

Class OperateurConditionnel {
    +opIFT() : void
}



}


Class Pile{
    -listeItems : vector<Item>
    -{static} instance : Pile
    +pop() : Item
    +push(item : Item) : void
    +estVide() : bool
    +taille() : unsigned int



}

Class Interpreteur{
    -pile : Pile&
    -{static} instance: Interpreteur
    +interprete(commandeEntree : QString)
    +execute(operande : QString)
    +{static} obtenirInterpreteur : Interpreteur&
}

Class Controleur{
    -refIntp : Interpreteur&
    -refPile : Pile&
    -message : QString
    +Controleur(intp : Interpreteur&, p : Pile&)
    +commande(c : const QString&)
    +setMessage(m : const QString&)
    +getMessage() : QString const
}

Class Persistance{
    -mapVariable : QMap<QString, QString>
    -mapProgramme : QMap<QString, QString>
}

package "groupeAffichage" {

    Class fenetrePrincipale{
        -barreMessage : QLineEdit *
        -vuePile : QTableWidget *
        -NbItemAAfficher : unsigned int 
	    -barreEntree : QLineEdit *
	    -pile : Pile *
	    -controleur : Controleur *
        -vue_variable : vueVariable *
        -vue_programme : vueProgramme *
        -vue_parametre : vueParametre *
        -persistance : Persistance *
        -afficherClavierCalculateur
        -afficherClavierVariable
        -bouton : QPushButton *
        -couche : QVBoxLayout *
	    +Qcomputer(QWidget * parent = 0)
	    +~QComputer()
        +getNombreItemAAfficher() : unsigned int
        +setNombreItemAAfficher(i : unsigned int) : void
        +getComputer() : QComputer *
        +rafraichirMethode() : void
        +refresh() : void
	    +getNextCommande() : void
        +empile_bouton() : void
        +affichageClavierCalculateur() : void
        +ouverture_vue_variable() : void
        +ouverture_vue_programme() : void
        +ouverture_vue_parametre() : void
    }

    Class vueVariable{
        -texteCreationVariable : QLabel *
        -entreeAtome : QLineEdit *
        -entreeVariable : QLineEdit *
        -validerCreation : QPushButton *
        -texteVariableEnregistre : QLabel *
        -layoutSaisie : QHBoxLayout *
        -listeVariable : QVBoxLayout *
        -fenetrePrincipale : QComputer *
        +vueVariable(QWidget *parent = 0)
        +~vueVariable()
        +setFenetrePrincipale(fenetrePrincipaleCopie : QComputer *) : void
        +getFenetrePrincipale() : QComputer*
        +rafraichirVariable() : void
        +ajouterVariable(): void
    }
    Class vueProgramme{
        -texteCreationProgramme : QLabel *
        -entreeAtomePG : QLineEdit *
        -entreeProgramme : QLineEdit *
        -validerCreationPG : QPushButton *
        -texteProgrammeEnregistre : QLabel *
        -layoutSaisiePG : QHBoxLayout *
        -listeProgramme : QVBoxLayout *
        -fenetrePrincipale : QComputer *
        +vueProgramme(QWidget *parent = 0)
        +~vueProgramme()
        +setFenetrePrincipale(fenetrePrincipaleCopie : QComputer *) : void
        +getFenetrePrincipale() : QComputer*
        +ajouterProgramme(): void
    }
    Class vueParametre{
        -messageParametre : QLabel *
        -choixNb : QSpinBox *
        -layoutParametre : QHBoxLayout *
        -fenetrePrincipale : QComputer *
        +vueParametre(QWidget * parent = 0)
        +~vueParametre
        +setFenetrePrincipale(fenetrePrincipaleCopie : QComputer *) : void
        +getFenetrePrincipale() : QComputer *
        +changerNbAfficherPile() : void

    }

}

Class Sauvegarde {

}

Litterale <|-- Programme
Litterale <|-- Numerique
Litterale <|-- Expression
Litterale <|-- Atome
Numerique <|-- Reel
Numerique <|-- Rationel
Numerique <|-- Entier

Operateur <|-- OperateurNumerique
Operateur <|-- OperateurLogique
Operateur <|-- OperateurPile
Operateur <|-- OperateurConditionnel 

ConstructeurLitterale *-- Litterale
Interpreteur *-- Operateur
Interpreteur *-- ConstructeurLitterale
Item *-- Litterale
Pile o-- Item
Pile <--> Interpreteur
fenetrePrincipale --> Persistance
Controleur *--> Interpreteur
Controleur *--> Pile
Controleur <-- Persistance
Controleur *--> fenetrePrincipale
fenetrePrincipale --> vueVariable
fenetrePrincipale --> vueProgramme
fenetrePrincipale --> vueParametre

@enduml
